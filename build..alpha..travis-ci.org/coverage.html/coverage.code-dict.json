{"/home/travis/build/npmtest/node-npmtest-mustbe/test.js":"/* istanbul instrument in package npmtest_mustbe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mustbe/lib.npmtest_mustbe.js":"/* istanbul instrument in package npmtest_mustbe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mustbe = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mustbe = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mustbe/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mustbe && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mustbe */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mustbe\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mustbe.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mustbe.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mustbe.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mustbe.__dirname + '/lib.npmtest_mustbe.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/index.js":"var MustBe = require(\"./core\");\n\nvar mustBe = new MustBe();\n\nmodule.exports = mustBe;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/core.js":"var Configurator = require(\"./config\");\nvar RouteHelpers = require(\"./routeHelpers\");\n\n// MustBe Core\n// -----------\n\nfunction MustBe(){\n}\n\n// Methods\n// -------\n\nMustBe.prototype.configure = function(cb){\n  var configurator = new Configurator();\n  cb(configurator);\n  this.config = configurator.getConfig();\n};\n\nMustBe.prototype.routeHelpers = function(){\n  var routeHelpers = new RouteHelpers(this.config);\n  return routeHelpers;\n};\n\nMustBe.prototype.getIdentity = function(identityTypeName){\n  var IdentityType = this.config.getIdentity(identityTypeName);\n  if (!IdentityType){\n    var noIdErr = new Error(\"Identity Not Found, \" + identityTypeName);\n    noIdErr.name = \"IdentityNotFoundException\";\n    throw noIdErr;\n  }\n  return new IdentityType(this.config);\n};\n\n// Exports\n// -------\n\nmodule.exports = MustBe;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/config/index.js":"var ActivityConfig = require(\"./activities\");\nvar UserIdentityConfig = require(\"./user-identity\");\nvar RouteHelperConfig = require(\"./route-helpers\");\nvar Registry = require(\"../registry\");\n\nfunction Configurator(){\n  var that = this;\n  var defaultActivities = new ActivityConfig();\n  this.activityRegistry = new Registry(defaultActivities);\n  this.identityRegistry = new Registry();\n  this.routeHelpersConfig = new RouteHelperConfig();\n  this.userIdentityConfig = new UserIdentityConfig();\n\n  this.defaultIdentityType = \"user\";\n  this.config = {\n    routeHelpers: this.routeHelpersConfig.config,\n    userIdentity: this.userIdentityConfig.config,\n    validators: {},\n    activities: this.activityRegistry,\n    identities: this.identityRegistry,\n    getActivities: function(identityTypeName){\n      var activitiesConfig = that.activityRegistry.get(identityTypeName);\n      var activities;\n      if (activitiesConfig) {\n        activities = activitiesConfig.config;\n      }\n      return activities;\n    },\n    getIdentity: function(identityTypeName){\n      return that.identityRegistry.get(identityTypeName);\n    }\n  };\n}\n\nConfigurator.prototype.getConfig = function(){\n  return this.config;\n};\n\nConfigurator.prototype.routeHelpers = function(cb){\n  cb(this.routeHelpersConfig);\n};\n\nConfigurator.prototype.userIdentity = function(cb){\n  cb(this.userIdentityConfig);\n};\n\nConfigurator.prototype.addIdentity = function(identityTypeName, IdentityType){\n  this.identityRegistry.register(identityTypeName, IdentityType);\n};\n\nConfigurator.prototype.activities = function(identityTypeName, cb){\n  if (!cb) { \n    cb = identityTypeName;\n    identityTypeName = this.defaultIdentityType;\n  }\n\n  var activityConfig;\n  if (this.activityRegistry.hasValue(identityTypeName)){\n    activityConfig = this.activityRegistry.get(identityTypeName);\n  } else {\n    activityConfig = new ActivityConfig();\n    this.activityRegistry.register(identityTypeName, activityConfig);\n  }\n\n  cb(activityConfig);\n};\n\nmodule.exports = Configurator;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/config/activities.js":"function Activities(){\n  this.config = {\n    validators: {}\n  };\n}\n\nActivities.prototype.can = function(activity, validator){\n  this.config.validators[activity] = validator;\n};\n\nActivities.prototype.deny = function(denier){\n  this.config.denier = denier;\n};\n\nActivities.prototype.allow = function(allower){\n  this.config.allower = allower;\n};\n\nmodule.exports = Activities;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/config/user-identity.js":"function UserIdentity(){\n  this.config = {};\n}\n\nUserIdentity.prototype.isAuthenticated = function(cb){\n  this.config.isAuthenticated = cb;\n};\n\nmodule.exports = UserIdentity;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/config/route-helpers.js":"var ParameterMap = require(\"./parameter-map\");\n\n// Helpers\n// -------\n\nfunction noGetUser(req, cb){\n  var noGetUserError = new Error(\"You must specify a getUser method on the mustBe config.routeHelpers\");\n  noGetUserError.name = \"NoGetUserMethodException\";\n  cb(noGetUserError);\n}\n\n// RouteHelpers\n// ------------\n\nfunction RouteHelpers(){\n  this.config = {\n    validators: {},\n    getUser: noGetUser,\n    parameterMaps: {}\n  };\n}\n\nRouteHelpers.prototype.getUser = function(cb){\n  this.config.getUser = cb;\n};\n\nRouteHelpers.prototype.notAuthenticated = function(cb){\n  this.config.notAuthenticated = cb;\n};\n\nRouteHelpers.prototype.notAuthorized = function(cb){\n  this.config.notAuthorized = cb;\n};\n\nRouteHelpers.prototype.parameterMaps = function(cb){\n  var parameterMap = new ParameterMap();\n  cb(parameterMap);\n  this.config.parameterMaps = parameterMap.getMaps();\n};\n\n// Exports\n// -------\n\nmodule.exports = RouteHelpers;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/config/parameter-map.js":"function ParameterMap(){\n  this.maps = {};\n}\n\nParameterMap.prototype.getMaps = function(){\n  return this.maps;\n};\n\nParameterMap.prototype.map = function(activity, mapper){\n  this.maps[activity] = mapper;\n};\n\nmodule.exports = ParameterMap;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/registry.js":"function Registry(defaultValue){\n  this._defaultValue = defaultValue;\n  this._values = Object.create(null);\n}\n\nRegistry.prototype.register = function(name, value){\n  this._values[name] = value;\n};\n\nRegistry.prototype.get = function(name){\n  var value;\n  if (this.hasValue(name)){\n    value = this._values[name];\n  } else {\n    value = this._defaultValue;\n  }\n  return value;\n};\n\nRegistry.prototype.hasValue = function(name){\n  return Object.prototype.hasOwnProperty.call(this._values, name);\n};\n\nmodule.exports = Registry;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/routeHelpers/index.js":"var Verifier = require(\"../verifier\");\nvar Principal = require(\"../principals\");\nvar UserIdentity = require(\"../identities/userIdentity\");\n\nfunction paramsFromRequest(req, config, activity){\n  var params;\n  var parameterMap = config.parameterMaps[activity];\n  if (parameterMap){\n    params = parameterMap(req);\n  }\n  return params;\n}\n\n\n// Route Helpers\n// -------------\n\nfunction RouteHelpers(config){\n  this.config = config;\n}\n\nRouteHelpers.prototype.authenticated = function(notAuthCB){\n  var that = this;\n  var config = this.config;\n\n  if (!notAuthCB){\n    notAuthCB = this.config.routeHelpers.notAuthenticated;\n  }\n\n  function handler(req, res, next){\n    var args = Array.prototype.slice.apply(arguments);\n\n    config.routeHelpers.getUser(req, function(err, user){\n      if (err) { return next(err); }\n\n      var userIdentity = new UserIdentity(user, config);\n      var verifier = new Verifier(userIdentity, config);\n      var principal = new Principal(userIdentity, verifier);\n      principal.isAuthenticated(function(err, isAuth){\n        if (err) { return next(err); }\n\n        if (isAuth){\n          return next();\n        } else {\n          return notAuthCB.apply(undefined, args);\n        }\n      });\n\n    });\n  }\n\n  return handler;\n};\n\nRouteHelpers.prototype.authorizeIdentity = function(identityTypeName, activity, notauthcb){\n  var that = this;\n  return this._handleAuthorization(activity, notauthcb, function(req, config, cb){\n    var identity = that.getIdentity(identityTypeName, config);\n    cb(null, identity);\n  });\n};\n\nRouteHelpers.prototype.authorized = function(activity, notauthcb){\n  return this._handleAuthorization(activity, notauthcb, function(req, config, cb){\n    config.routeHelpers.getUser(req, function(err, user){\n      if (err) { return cb(err); }\n\n      var identity = new UserIdentity(user, config);\n      cb(null, identity);\n    });\n  });\n};\n\nRouteHelpers.prototype._handleAuthorization = function(activity, notauthcb, getIdentitycb){\n  var that = this;\n  var config = this.config;\n\n  if (!notauthcb){\n    notauthcb = config.routeHelpers.notAuthorized;\n  }\n\n  return function(req, res, next){\n    var handlerArgs = Array.prototype.slice.apply(arguments);\n    \n    getIdentitycb(req, config, function(err, identity){\n      if (err) { return next(err); }\n\n      var params = paramsFromRequest(req, config.routeHelpers, activity);\n      var verifier = new Verifier(identity, config);\n      var principal = new Principal(identity, verifier);\n\n      principal.isAuthorized(activity, params, function(err, isAuth){\n        if (err) { return next(err); }\n\n        if (isAuth) { \n          return next();\n        } else {\n          return notauthcb.apply(undefined, handlerArgs);\n        }\n      });\n    });\n  };\n};\n\nRouteHelpers.prototype.getIdentity = function(identityTypeName, config){\n  var IdentityType = config.getIdentity(identityTypeName);\n  if (!IdentityType){\n    var noIdErr = new Error(\"Identity Not Found, \" + identityTypeName);\n    noIdErr.name = \"IdentityNotFoundException\";\n    throw noIdErr;\n  }\n  return new IdentityType(config);\n};\n\nmodule.exports = RouteHelpers;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/verifier/index.js":"var RSVP = require(\"rsvp\");\n\n// helpers\n// -------\n\nfunction handleOverrides(config, identity, activity){\n  var denierPromise = new RSVP.Promise(function(resolve, reject){\n    var denier = config.denier;\n    if (!denier){ \n      return resolve(false); \n    }\n\n    denier(identity, activity, function(err, isDenied){\n      if (err) { reject(err); }\n      resolve(isDenied);\n    });\n  });\n\n  var allowerPromise = new RSVP.Promise(function(resolve, reject){\n    var allower = config.allower;\n    if (!allower){\n      return resolve(false);\n    }\n\n    allower(identity, activity, function(err, isAllowed){\n      if (err) { reject(err); }\n      resolve(isAllowed);\n    });\n  });\n\n  return RSVP.all([denierPromise, allowerPromise]);\n}\n\n// Verifier\n// --------\n\nfunction Verifier(identity, config){\n  this.identity = identity;\n  this.config = config;\n  this.activities = config.getActivities(identity.type);\n}\n\nVerifier.prototype.isAuthorized = function(activity, requestParams, cb){\n  var that = this;\n  var config = this.config;\n  var identity = this.identity;\n\n  var validators = this.activities.validators;\n  var denyAllowConfig = {\n    denier: this.activities.denier,\n    allower: this.activities.allower\n  };\n\n  var override = handleOverrides(denyAllowConfig, identity, activity);\n  override.then(function(overrideArgs){\n    var isDenied = overrideArgs[0];\n    var isAllowed = overrideArgs[1];\n\n    // handle overrides\n    \n    if (isDenied){\n      // denied, isAuth = false;\n      return cb(null, false);\n    }\n\n    if (isAllowed){\n      // allowed, isAuth = true;\n      return cb(null, true);\n    }\n\n    // handle validation of authorization\n\n    var validator = validators[activity];\n    if (!validator){\n      var noActivityError = new Error(\"Activity Not Found, \" + activity);\n      noActivityError.name = \"ActivityNotFoundException\";\n      return cb(noActivityError, false);\n    }\n\n    validator(identity, requestParams, function(err, isAuthorized){\n      if (err) { return cb(err); }\n\n      if (isAuthorized){\n        // allowed, isAuth = true;\n        return cb(null, true);\n      } else {\n        // denied, isAuth = false;\n        return cb(null, false);\n      }\n\n    });\n  }).then(undefined, function(err){\n    return cb(err);\n  });\n\n};\n\nmodule.exports = Verifier;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/principals/index.js":"\n// Principal\n// -------------\n\nfunction Principal(identity, verifier){\n  this.identity = identity;\n  this.verifier = verifier;\n}\n\nPrincipal.prototype.isAuthenticated = function(cb){\n  this.identity.isAuthenticated(cb);\n};\n\nPrincipal.prototype.isAuthorized = function(activity, requestParams, cb){\n  this.verifier.isAuthorized(activity, requestParams, cb);\n};\n\nmodule.exports = Principal;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/mustbe/identities/userIdentity.js":"function UserIdentity(user, config){\n  this.user = user;\n  this.config = config;\n}\n\nUserIdentity.prototype.isAuthenticated = function(cb){\n  var user = this.user;\n  var isAuth = this.config.userIdentity.isAuthenticated;\n  return isAuth.call(this, user, cb);\n};\n\nUserIdentity.prototype.type = \"user\";\n\nmodule.exports = UserIdentity;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/gruntfile.js":"var util = require(\"util\");\nutil.print = process.stdout.write.bind(process.stdout);\n\nmodule.exports = function(grunt){\n  grunt.initConfig({\n    jshint: {\n      options: {\n        jshintrc: \".jshintrc\"\n      },\n      build: [ \"mustbe/**/*.js\" ]\n    },\n\n    jasmine_nodejs: {\n      options: {\n        specNameSuffix: \"specs.js\"\n      },\n      reporters: {\n        console: {\n          colors: true,\n          listStyle: \"indent\"\n        },\n      },\n      all: {\n        specs: [\"specs/**\"],\n      }\n    },\n\n    watch: {\n      specs: {\n        files: [\"mustbe/**/*.js\", \"specs/**/*.js\"],\n        tasks: [\"specs\"]\n      }\n    }\n  });\n\n  grunt.loadNpmTasks(\"grunt-jasmine-nodejs\");\n  grunt.loadNpmTasks(\"grunt-contrib-jshint\");\n  grunt.loadNpmTasks(\"grunt-contrib-watch\");\n\n  grunt.registerTask(\"specs\", [\"jshint\", \"jasmine_nodejs:all\"]);\n  grunt.registerTask(\"default\", [\"specs\", \"watch\"]);\n};\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/demo/app.js":"var express = require(\"express\");\nvar path = require(\"path\");\nvar favicon = require(\"serve-favicon\");\nvar logger = require(\"morgan\");\nvar cookieParser = require(\"cookie-parser\");\nvar bodyParser = require(\"body-parser\");\n\nvar app = express();\n\n// view engine setup\napp.set(\"views\", path.join(__dirname, \"views\"));\napp.set(\"view engine\", \"jade\");\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(__dirname + \"/public/favicon.ico\"));\napp.use(logger(\"dev\"));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, \"public\")));\n\n// set up mustbe config\nvar mustBe = require(\"../mustbe\");\nvar mustBeConfig = require(\"./mustBeConfig\");\nmustBe.configure(mustBeConfig);\n\n// now add the routes\nvar routes = require(\"./routes\");\napp.use(\"/\", routes);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n    var err = new Error(\"Not Found\");\n    err.status = 404;\n    next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get(\"env\") === \"development\") {\n    app.use(function(err, req, res, next) {\n        res.status(err.status || 500);\n        res.render(\"error\", {\n            message: err.message,\n            error: err\n        });\n    });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    res.render(\"error\", {\n        message: err.message,\n        error: {}\n    });\n});\n\n\nmodule.exports = app;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/demo/mustBeConfig.js":"var User = require(\"./lib/user\");\n\nmodule.exports = function(config){\n\n  config.routeHelpers(function(rh){\n    rh.getUser(function(req, cb){\n\n      // this may involve database code or other\n      // things... in this case, a user object\n      var userCookie = req.cookies[\"usercookie\"];\n      User.loginFromCookie(userCookie, function(err, user){\n        cb(null, user);\n      });\n    });\n\n    rh.notAuthorized(function(req, res, next){\n      res.redirect(\"/?alert=you are not authorized!\");\n    });\n\n    rh.notAuthenticated(function(req, res, next){\n      res.redirect(\"/?alert=you must log in first!\");\n    });\n  });\n\n  config.userIdentity(function(id){\n    id.isAuthenticated(function(user, cb){\n\n      // you may have real logic here to check if someone\n      // is logged in or not. maybe this hits a database\n      // or does something else...\n      var isAuthenticated = !!user;\n      return cb(null, isAuthenticated);\n\n    });\n  });\n\n  config.activities(function(activities){\n\n    activities.can(\"users.view\", function(identity, params, cb){\n      // normally, you would make calls to your database and\n      // check if the logged in person is allowed to see the\n      // user list, or something like that. but for this \n      // hard coded demo app, anyone can view the user list, \n      // if they are logged in\n      identity.isAuthenticated(function(err, isAuth){\n        return cb(err, isAuth);\n      });\n    });\n\n    activities.can(\"admin\", function(identity, params, cb){\n      // now check if you're an admin. this may involve database\n      // calls or other service calls.\n      var user = identity.user;\n      var isAdmin = (user.roles.indexOf(\"admin\") > -1);\n      cb(null, isAdmin);\n    });\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/demo/lib/user.js":"function User(username, password){\n  this.username = username;\n  this.password = password;\n  this.roles = [];\n\n  if (username === \"admin\"){\n    this.roles.push(\"admin\");\n  }\n};\n\nUser.login = function(username, password, cb){\n  // this is where you would have real logic to log the user in\n  // using a database or whatever other service you want\n  var user;\n  if (username) {\n    user = new User(username, password);\n  }\n  cb(null, user);\n};\n\nUser.loginFromCookie = function(cookie, cb){\n  // this would involve database logic to convert a cookie id\n  // in to a user object, most likely. i'm just hard coding it\n  // for demo purposes\n  var user;\n  if (cookie) {\n    user = new User(cookie);\n  }\n  cb(null, user);\n};\n\nmodule.exports = User;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/specs/identity-specs.js":"var MustBe = require(\"../mustbe/core\");\nvar helpers = require(\"./helpers\");\n\ndescribe(\"identity\", function(){\n\n  describe(\"when getting a custom identity by type\", function(){\n    var Identity, IdentityType, id;\n\n    beforeEach(function(){\n      IdentityType = \"cust.id\";\n      Identity = function(){\n        this.type=IdentityType;\n        this.isAuthenticated = function(){};\n      };\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.addIdentity(IdentityType, Identity);\n      });\n\n      id = mustBe.getIdentity(IdentityType);\n    });\n\n    it(\"should return the custom identity\", function(){\n      expect(id.type).toBe(IdentityType);\n    });\n  });\n\n});\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/specs/helpers/index.js":"var express = require(\"express\");\nvar supertest = require(\"supertest\");\n\nvar user = {};\n\nvar helpers = {\n  user: user,\n\n  setupRoute: function(route, mustBe, cb){\n    var app = new express();\n\n    var router = express.Router();\n    var handler = function(req, res, next){\n      res.send({});\n    };\n\n    var authorizationCheck = cb();\n    router.get(route, authorizationCheck, handler);\n    app.use(\"/\", router);\n\n    return function(route, cb){\n      if (!cb){ \n        cb = route; \n        route = \"/\";\n      }\n\n      supertest(app)\n        .get(route)\n        .end(function(err, res){\n          cb(err, res);\n        });\n    }\n  },\n\n  isAuthenticated: function(identity, cb){ \n    cb(null, !!identity); \n  },\n\n  notAuthenticated: function(req, res){\n    res.status(403).send({});\n  },\n\n  notAuthorized: function(req, res){\n    res.status(403).send({});\n  },\n\n  authorizedValidation: function(identity, params, cb){\n    cb(null, true);\n  },\n\n  unauthorizedValidation: function(identity, params, cb){\n    cb(null, false);\n  },\n\n  getValidUser: function(req, cb){ \n    cb(null, user); \n  },\n\n  getNullUser: function(req, cb){\n    cb(null, null);\n  },\n\n  expectResponseCode: function(response, code){\n    if (response.status === 500){ \n      throw response.text;\n    } else {\n      expect(response.status).toBe(code);\n    }\n  },\n\n  expectResponseError: function(response, message, errorType){\n    if (!errorType) { errorType = \"Error\"; }\n\n    var errorMessage = errorType + \": \" + message\n    expect(response.status).toBe(500);\n    var idx = response.text.indexOf(errorMessage);\n    expect(idx).toBe(0, \"Expected error message '\" + errorMessage + \"', but got '\" + response.text + \"'\");\n  },\n\n  expectRedirect: function(response, code, url){\n    expect(response.status).toBe(code);\n    expect(response.headers.location).toBe(url);\n  }\n};\n\nmodule.exports = helpers;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/demo/routes/admin.js":"var express = require(\"express\");\n\nvar router = new express.Router();\n\nrouter.get(\"/\", function(req, res, next){\n  res.render(\"admin\");\n});\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/demo/routes/home.js":"var express = require('express');\nvar router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res) {\n  var alert = req.query.alert;\n  var message = req.query.message;\n  res.render('index', {\n    alert: alert,\n    message: message\n  });\n});\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/demo/routes/login.js":"var User = require(\"../lib/user\");\nvar express = require(\"express\");\n\nvar router = new express.Router();\n\nrouter.get(\"/\", function(req, res, next){\n  res.render(\"login\");\n});\n\nrouter.get(\"/logout\", function(req, res, next){\n  res.clearCookie(\"usercookie\");\n  res.redirect(\"/?message=you are logged out now\");\n});\n\nrouter.post(\"/\", function(req, res, next){\n  var username = req.body.username;\n  var password = req.body.password;\n\n  User.login(username, password, function(err, user){\n    if (err) { return next(err); }\n\n    // store cookie for later use\n    if (user){\n      res.cookie(\"usercookie\", username);\n    }\n\n    res.redirect(\"/?message=you are logged in!\");\n  });\n  \n});\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/demo/routes/profile.js":"var express = require(\"express\");\nvar mustBe = require(\"../../mustbe\").routeHelpers();\n\nvar router = new express.Router();\n\n// use mustBe to make sure you are authenticated\nrouter.get(\"/\", mustBe.authenticated(), viewProfile);\n\nfunction viewProfile(req, res, next){\n  res.render(\"profile\");\n}\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/demo/routes/users.js":"var express = require(\"express\");\nvar mustBe = require(\"../../mustbe\").routeHelpers();\n\nvar router = new express.Router();\n\n// use mustBe to make sure you are authorized\nrouter.get(\"/\", mustBe.authorized(\"users.view\"), viewUsers);\n\nfunction viewUsers(req, res, next){\n  res.render(\"users\");\n}\n\nmodule.exports = router;\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/specs/custom-identity/authorization-check-specs.js":"var MustBe = require(\"../../mustbe/core\");\nvar helpers = require(\"../helpers\");\n\ndescribe(\"custom identity authorization check\", function(){\n\n  describe(\"when requesting authorization for a custom identity\", function(){\n    var identityType = \"my-identity\";\n\n    describe(\"and that identity is allowed to do the activity\", function(){\n      var response;\n\n      beforeEach(function(done){\n        var mustBe = new MustBe();\n\n        mustBe.configure(function(config){\n          var MyIdentity = function(config){\n            this.type = identityType;\n            this.config = config;\n            this.isAuthenticated = function(cb){\n              cb(true);\n            };\n          };\n\n          config.addIdentity(identityType, MyIdentity);\n\n          config.activities(identityType, function(activities){\n            activities.can(\"do thing\", helpers.authorizedValidation);\n          });\n        });\n\n        var routeHelpers = mustBe.routeHelpers();\n        var request = helpers.setupRoute(\"/\", mustBe, function(){\n          return routeHelpers.authorizeIdentity(identityType, \"do thing\");\n        });\n\n        request(function(err, res){\n          response = res;\n          done();\n        });\n      });\n\n      it(\"should authorize the activity\", function(){\n        helpers.expectResponseCode(response, 200);\n      });\n    });\n\n    describe(\"and that identity is not allowed to do the activity\", function(){\n      var response;\n\n      beforeEach(function(done){\n        var mustBe = new MustBe();\n\n        mustBe.configure(function(config){\n          var MyIdentity = function(config){\n            this.type = identityType;\n            this.config = config;\n            this.isAuthenticated = function(cb){\n              cb(null, true);\n            };\n          };\n\n          config.routeHelpers(function(rh){\n            rh.notAuthorized(helpers.notAuthorized);\n          });\n\n          config.addIdentity(identityType, MyIdentity);\n\n          config.activities(identityType, function(activities){\n            activities.can(\"do thing\", helpers.unauthorizedValidation);\n          });\n        });\n\n        var routeHelpers = mustBe.routeHelpers();\n        var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n          return routeHelpers.authorizeIdentity(identityType, \"do thing\", handler);\n        });\n\n        request(function(err, res){\n          response = res;\n          done();\n        });\n      });\n\n      it(\"should not authorize the activity\", function(){\n        helpers.expectResponseCode(response, 403);\n      });\n    });\n\n  });\n\n});\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/specs/custom-identity/authorization-override-specs.js":"var MustBe = require(\"../../mustbe/core\");\nvar helpers = require(\"../helpers\");\n\ndescribe(\"custom identity authorization overrides\", function(){\n  var identityType = \"my-identity\";\n  var MyIdentity = function(config){\n    this.type = identityType;\n    this.config = config;\n    this.isAuthenticated = function(cb){\n      cb(true);\n    };\n  };\n\n  describe(\"when an activity is explicitly denied\", function(){\n    var response, user;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.notAuthorized(helpers.notAuthorized);\n        });\n\n        config.addIdentity(identityType, MyIdentity);\n        \n        config.activities(identityType, function(activities){\n          activities.deny(function(user, activity, cb){\n            cb(null, true);\n          });\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorizeIdentity(identityType, \"do thing\", handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should not allow the request\", function(){\n      helpers.expectResponseCode(response, 403);\n    });\n\n  });\n\n  describe(\"when an activity is explicitly allowed\", function(){\n    var response, user;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.addIdentity(identityType, MyIdentity);\n        \n        config.activities(identityType, function(activities){\n          activities.allow(function(user, activity, cb){\n            cb(null, true);\n          });\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorizeIdentity(identityType, \"do thing\", handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should allow the request\", function(){\n      helpers.expectResponseCode(response, 200);\n    });\n\n  });\n\n  describe(\"when an activity is explicitly denied and allowed\", function(){\n    var response, user;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.notAuthorized(helpers.notAuthorized);\n        });\n\n        config.addIdentity(identityType, MyIdentity);\n        \n        config.activities(identityType, function(activities){\n          activities.deny(function(user, activity, cb){\n            cb(null, true);\n          });\n\n          activities.allow(function(user, activity, cb){\n            cb(null, true);\n          });\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorizeIdentity(identityType, \"do thing\", handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should not allow the request\", function(){\n      helpers.expectResponseCode(response, 403);\n    });\n  });\n\n  describe(\"when an activity is neither explicitly denied nor explicitly allowed, but is authorized\", function(){\n    var response, user;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.addIdentity(identityType, MyIdentity);\n        \n        config.activities(identityType, function(activities){\n          activities.deny(function(user, activity, cb){\n            cb(null, false);\n          });\n\n          activities.allow(function(user, activity, cb){\n            cb(null, false);\n          });\n\n          activities.can(\"do thing\", function(user, params, cb){\n            cb(null, true);\n          });\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorizeIdentity(identityType, \"do thing\", handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should allow the request\", function(){\n      helpers.expectResponseCode(response, 200);\n    });\n  });\n\n  describe(\"when an activity is neither explicitly denied nor explicitly allowed, and not authorized\", function(){\n    var response, user;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.notAuthorized(helpers.notAuthorized);\n        });\n\n        config.addIdentity(identityType, MyIdentity);\n        \n        config.activities(identityType, function(activities){\n          activities.deny(function(user, activity, cb){\n            cb(null, false);\n          });\n\n          activities.allow(function(user, activity, cb){\n            cb(null, false);\n          });\n\n          activities.can(\"do thing\", function(user, params, cb){\n            cb(null, false);\n          });\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorizeIdentity(identityType, \"do thing\", handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should not allow the request\", function(){\n      helpers.expectResponseCode(response, 403);\n    });\n  });\n\n});\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/specs/custom-identity/invalid-identity-specs.js":"var MustBe = require(\"../../mustbe/core\");\nvar helpers = require(\"../helpers\");\n\ndescribe(\"invalid identity authorization check\", function(){\n  var identityType = \"my-identity\";\n\n  describe(\"when requesting authorization for a custom identity that does not exist\", function(){\n    var nonExistentType = \"non-existent\";\n    var mustBe, err, response;\n\n    beforeEach(function(done){\n      mustBe = new MustBe();\n\n      mustBe.configure(function(config){});\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorizeIdentity(nonExistentType, \"do thing\", handler);\n      });\n\n      request(function(e, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should throw an 'identity not found' exception\", function(){\n      var errorMessage = \"Identity Not Found, \" + nonExistentType;\n      var errorType = \"IdentityNotFoundException\";\n      helpers.expectResponseError(response, errorMessage, errorType);\n    });\n  });\n\n  describe(\"when requesting authorization for an activity that does not exist on a custom identity\", function(){\n    var nonExistentActivity = \"non-existent\";\n    var response;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        var MyIdentity = function(config){\n          this.type = identityType;\n          this.config = config;\n          this.isAuthenticated = function(cb){\n            cb(null, true);\n          };\n        };\n\n        config.routeHelpers(function(rh){\n          rh.notAuthorized(helpers.notAuthorized);\n        });\n\n        config.addIdentity(identityType, MyIdentity);\n\n        config.activities(identityType, function(activities){\n          activities.can(\"do thing\", helpers.unauthorizedValidation);\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorizeIdentity(identityType, nonExistentActivity, handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should not authorize the activity\", function(){\n      var errorMessage = \"Activity Not Found, \" + nonExistentActivity;\n      var errorType = \"ActivityNotFoundException\";\n      helpers.expectResponseError(response, errorMessage, errorType);\n    });\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/specs/user-route-helper/auhorization-no-activity-name-specs.js":"var MustBe = require(\"../../mustbe/core\");\nvar helpers = require(\"../helpers\");\n\ndescribe(\"no activity name\", function(){\n\n  describe(\"when authorizing with no activity name, and not explicitly allowed or denied\", function(){\n    var response;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n\n        config.routeHelpers(function(rh){\n          rh.getUser(helpers.getValidUser);\n          rh.notAuthorized(helpers.notAuthorized);\n        });\n\n        config.userIdentity(function(id){\n          id.isAuthenticated(helpers.isAuthenticated);\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(){\n        return routeHelpers.authorized();\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should not allow request\", function(){\n      var errorMessage = \"Activity Not Found, undefined\";\n      var errorType = \"ActivityNotFoundException\";\n      helpers.expectResponseError(response, errorMessage, errorType);\n    });\n\n  });\n\n  describe(\"when authorizing with no activity name, and explicitly denied\", function(){\n    var response;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.getUser(helpers.getValidUser);\n          rh.notAuthorized(helpers.notAuthorized);\n        });\n\n        config.userIdentity(function(id){\n          id.isAuthenticated(helpers.isAuthenticated);\n        });\n\n        config.activities(function(activities){\n          activities.deny(function(user, activity, cb){\n            cb(null, true);\n          });\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorized(handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should not allow request\", function(){\n      helpers.expectResponseCode(response, 403);\n    });\n\n  });\n\n  describe(\"when authorizing with no activity name, but explicitly allowed\", function(){\n    var response;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.getUser(helpers.getValidUser);\n          rh.notAuthorized(helpers.notAuthorized);\n        });\n\n        config.userIdentity(function(id){\n          id.isAuthenticated(helpers.isAuthenticated);\n        });\n\n        config.activities(function(activities){\n          activities.allow(function(user, activity, cb){\n            cb(null, true);\n          });\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorized(handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should allow request\", function(){\n      helpers.expectResponseCode(response, 200);\n    });\n\n  });\n\n});\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/specs/user-route-helper/authorization-specs.js":"var MustBe = require(\"../../mustbe/core\");\nvar helpers = require(\"../helpers\");\n\ndescribe(\"authorization\", function(){\n\n  describe(\"when doing authorization check\", function(){\n    var response, userIdentity;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.getUser(helpers.getValidUser);\n        });\n\n        config.userIdentity(function(id){\n          id.isAuthenticated(helpers.isAuthenticated);\n        });\n\n        config.activities(function(activities){\n          activities.can(\"do thing\", function(u, params, cb){\n            userIdentity = u;\n            cb(null, true);\n          });\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorized(\"do thing\", handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should pass the user to the validator\", function(){\n      expect(userIdentity.user).toBe(helpers.user);\n    });\n  });\n\n  describe(\"when an authorized route has params that are mapped\", function(){\n    var params, response, req;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.getUser(helpers.getValidUser);\n\n          rh.parameterMaps(function(params){\n            params.map(\"do thing\", function(req){\n              return {\n                foo: req.params[\"foo\"]\n              }\n            });\n          });\n        });\n\n        config.userIdentity(function(id){\n          id.isAuthenticated(helpers.isAuthenticated);\n        });\n\n        config.activities(function(activities){\n          activities.can(\"do thing\", function(user, p, cb){\n            params = p;\n            cb(null, true);\n          });\n        });\n\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/:foo\", mustBe, function(handler){\n        return routeHelpers.authorized(\"do thing\", handler);\n      });\n\n      request(\"/bar\", function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should pass the params to the authorization check\", function(){\n      expect(params.foo).toBe(\"bar\");\n    });\n  });\n\n});\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/specs/user-route-helper/custom-fail-response-specs.js":"var MustBe = require(\"../../mustbe/core\");\nvar helpers = require(\"../helpers\");\n\ndescribe(\"custom failure response\", function(){\n\n  describe(\"when not authenticated and custom failure method is provided\", function(){\n    var response, req, res, next;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.getUser(helpers.getNullUser);\n        });\n\n        config.userIdentity(function(id){\n          id.isAuthenticated(helpers.isAuthenticated);\n        });\n      });\n\n      function failure(req, res, next){\n        res.redirect(301, \"http://google.com\");\n      }\n\n      var request = helpers.setupRoute(\"/\", mustBe, function(){\n        var routeHelpers = mustBe.routeHelpers();\n        return routeHelpers.authenticated(failure);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should use the custom response\", function(){\n      helpers.expectRedirect(response, 301, \"http://google.com\");\n    });\n\n  });\n\n  describe(\"when not authorized and custom failure method is provided\", function(){\n    var response, req, res, next;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.getUser(helpers.getValidUser);\n          rh.notAuthorized(helpers.notAuthorized);\n        });\n\n        config.userIdentity(function(id){\n          id.isAuthenticated(helpers.isAuthenticated);\n        });\n\n        config.activities(function(activities){\n          activities.can(\"do thing\", helpers.unauthorizedValidation);\n        });\n      });\n\n      function failure(req, res, next){\n        res.redirect(301, \"http://google.com\");\n      }\n\n      var request = helpers.setupRoute(\"/\", mustBe, function(){\n        var routeHelpers = mustBe.routeHelpers();\n        return routeHelpers.authorized(\"do thing\", failure);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should use the custom response\", function(){\n      helpers.expectRedirect(response, 301, \"http://google.com\");\n    });\n\n  });\n\n});\n","/home/travis/build/npmtest/node-npmtest-mustbe/node_modules/mustbe/specs/user-route-helper/user-authenticated-specs.js":"var MustBe = require(\"../../mustbe/core\");\nvar helpers = require(\"../helpers\");\n\ndescribe(\"user authenticated\", function(){\n\n  describe(\"when user is found\", function(){\n    var response;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.getUser(helpers.getValidUser);\n        });\n\n        config.userIdentity(function(id){\n          id.isAuthenticated(helpers.isAuthenticated);\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authenticated(handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should allow request\", function(){\n      helpers.expectResponseCode(response, 200);\n    });\n\n  });\n\n  describe(\"when user is not found\", function(){\n    var response;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.getUser(helpers.getNullUser);\n          rh.notAuthenticated(helpers.notAuthenticated);\n        });\n        config.userIdentity(function(id){\n          id.isAuthenticated(helpers.isAuthenticated);\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authenticated(handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should not allow request\", function(){\n      helpers.expectResponseCode(response, 403);\n    });\n\n  });\n\n  describe(\"when getting user causes error\", function(){\n    var response;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.getUser(function(req, cb){\n            var err = new Error(\"some error\");\n            cb(err);\n          });\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authenticated(handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should throw the error\", function(){\n      helpers.expectResponseError(response, \"some error\");\n    });\n\n  });\n\n  describe(\"when there is not getUser method, and trying to authorize user\", function(){\n    var response;\n\n    beforeEach(function(done){\n      var mustBe = new MustBe();\n\n      mustBe.configure(function(config){\n        config.routeHelpers(function(rh){\n          rh.notAuthorized(helpers.notAuthorized);\n        });\n      });\n\n      var routeHelpers = mustBe.routeHelpers();\n      var request = helpers.setupRoute(\"/\", mustBe, function(handler){\n        return routeHelpers.authorized(\"foo\", handler);\n      });\n\n      request(function(err, res){\n        response = res;\n        done();\n      });\n    });\n\n    it(\"should throw an user saying can't get user\", function(){\n      var errType = \"NoGetUserMethodException\";\n      var msg = \"You must specify a getUser method on the mustBe config.routeHelpers\"; \n      helpers.expectResponseError(response, msg, errType);\n    });\n\n  });\n\n});\n"}